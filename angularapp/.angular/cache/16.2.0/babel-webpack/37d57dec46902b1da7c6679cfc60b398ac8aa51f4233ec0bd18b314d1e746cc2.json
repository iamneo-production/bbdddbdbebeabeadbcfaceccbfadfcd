{"ast":null,"code":"var _class;\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, makeEnvironmentProviders } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nvar NgxCurrencyInputMode;\n(function (NgxCurrencyInputMode) {\n  NgxCurrencyInputMode[NgxCurrencyInputMode[\"Financial\"] = 0] = \"Financial\";\n  NgxCurrencyInputMode[NgxCurrencyInputMode[\"Natural\"] = 1] = \"Natural\";\n})(NgxCurrencyInputMode || (NgxCurrencyInputMode = {}));\nconst NGX_CURRENCY_CONFIG = new InjectionToken('ngx-currency.config');\nclass InputManager {\n  constructor(_htmlInputElement) {\n    this._htmlInputElement = _htmlInputElement;\n    this._storedRawValue = null;\n  }\n  setCursorAt(position) {\n    this._htmlInputElement.focus();\n    this._htmlInputElement.setSelectionRange(position, position);\n  }\n  updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n    this.rawValue = newRawValue;\n    const newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n  get canInputMoreNumbers() {\n    const onlyNumbers = this.rawValue?.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, '') ?? '';\n    const hasReachedMaxLength = !(onlyNumbers.length >= this._htmlInputElement.maxLength && this._htmlInputElement.maxLength >= 0);\n    const selectionStart = this.inputSelection.selectionStart;\n    const selectionEnd = this.inputSelection.selectionEnd;\n    const haveNumberSelected = !!(selectionStart != selectionEnd && this._htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n    const startWithZero = this._htmlInputElement.value.substring(0, 1) == '0';\n    return hasReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n  get inputSelection() {\n    return {\n      selectionStart: this._htmlInputElement.selectionStart ?? 0,\n      selectionEnd: this._htmlInputElement.selectionEnd ?? 0\n    };\n  }\n  get rawValue() {\n    return this._htmlInputElement && this._htmlInputElement.value;\n  }\n  set rawValue(value) {\n    this._storedRawValue = value;\n    if (this._htmlInputElement) {\n      this._htmlInputElement.value = value ?? '';\n    }\n  }\n  get storedRawValue() {\n    return this._storedRawValue || '';\n  }\n}\nclass InputService {\n  constructor(htmlInputElement, _options) {\n    this._options = _options;\n    this._singleDigitRegex = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n    this._onlyNumbersRegex = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n    this._perArNumber = new Map([['\\u06F0', '0'], ['\\u06F1', '1'], ['\\u06F2', '2'], ['\\u06F3', '3'], ['\\u06F4', '4'], ['\\u06F5', '5'], ['\\u06F6', '6'], ['\\u06F7', '7'], ['\\u06F8', '8'], ['\\u06F9', '9'], ['\\u0660', '0'], ['\\u0661', '1'], ['\\u0662', '2'], ['\\u0663', '3'], ['\\u0664', '4'], ['\\u0665', '5'], ['\\u0666', '6'], ['\\u0667', '7'], ['\\u0668', '8'], ['\\u0669', '9']]);\n    this.inputManager = new InputManager(htmlInputElement);\n  }\n  addNumber(keyCode) {\n    const {\n      decimal,\n      precision,\n      inputMode\n    } = this._options;\n    const keyChar = String.fromCharCode(keyCode);\n    const isDecimalChar = keyChar === this._options.decimal;\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, keyChar);\n      let selectionStart = undefined;\n      if (inputMode === NgxCurrencyInputMode.Natural && precision > 0) {\n        selectionStart = this.rawValue.indexOf(decimal);\n        if (isDecimalChar) {\n          selectionStart++;\n        }\n      }\n      this.updateFieldValue(selectionStart);\n    } else {\n      const selectionStart = this.inputSelection.selectionStart;\n      const selectionEnd = this.inputSelection.selectionEnd;\n      const rawValueStart = this.rawValue.substring(0, selectionStart);\n      let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\n      // In natural mode, replace decimals instead of shifting them.\n      const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n      if (inputMode === NgxCurrencyInputMode.Natural && inDecimalPortion && selectionStart === selectionEnd) {\n        rawValueEnd = rawValueEnd.substring(1);\n      }\n      const newValue = rawValueStart + keyChar + rawValueEnd;\n      let nextSelectionStart = selectionStart + 1;\n      const isDecimalOrThousands = isDecimalChar || keyChar === this._options.thousands;\n      if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n        // If the cursor is just before the decimal or thousands separator and the user types the\n        // decimal or thousands separator, move the cursor past it.\n        nextSelectionStart++;\n      } else if (!this._singleDigitRegex.test(keyChar)) {\n        // Ignore other non-numbers.\n        return;\n      }\n      this.rawValue = newValue;\n      this.updateFieldValue(nextSelectionStart);\n    }\n  }\n  applyMask(isNumber, rawValue, disablePadAndTrim = false) {\n    const {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands,\n      min,\n      inputMode\n    } = this._options;\n    let {\n      max\n    } = this._options;\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(this._onlyNumbersRegex, '');\n    if (!onlyNumbers && rawValue !== decimal) {\n      return '';\n    }\n    if (inputMode === NgxCurrencyInputMode.Natural && !isNumber && !disablePadAndTrim) {\n      rawValue = this.padOrTrimPrecision(rawValue);\n      onlyNumbers = rawValue.replace(this._onlyNumbersRegex, '');\n    }\n    let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^\\u0660*/g, '').replace(/^\\u06F0*/g, '').replace(/^0*/g, '');\n    if (integerPart == '') {\n      integerPart = '0';\n    }\n    const integerValue = parseInt(integerPart);\n    integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n    if (thousands && integerPart.startsWith(thousands)) {\n      integerPart = integerPart.substring(1);\n    }\n    let newRawValue = integerPart;\n    const decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n    const decimalValue = parseInt(decimalPart) || 0;\n    const isNegative = rawValue.indexOf('-') > -1;\n    // Ensure max is at least as large as min.\n    max = max === null || max === undefined || min === null || min === undefined ? max : Math.max(max, min);\n    // Ensure precision number works well with more than 2 digits\n    // 23 / 100... 233 / 1000 and so on\n    const divideBy = Number('1'.padEnd(precision + 1, '0'));\n    // Restrict to the min and max values.\n    let newValue = integerValue + decimalValue / divideBy;\n    newValue = isNegative ? -newValue : newValue;\n    if (max !== null && max !== undefined && newValue > max) {\n      return this.applyMask(true, max + '');\n    } else if (min !== null && min !== undefined && newValue < min) {\n      return this.applyMask(true, min + '');\n    }\n    if (precision > 0) {\n      if (newRawValue == '0' && decimalPart.length < precision) {\n        newRawValue += decimal + '0'.repeat(precision - 1) + decimalPart;\n      } else {\n        newRawValue += decimal + decimalPart;\n      }\n    }\n    // let isZero = newValue == 0;\n    const operator = isNegative && allowNegative /*&& !isZero */ ? '-' : '';\n    return operator + prefix + newRawValue + suffix;\n  }\n  padOrTrimPrecision(rawValue) {\n    const {\n      decimal,\n      precision\n    } = this._options;\n    let decimalIndex = rawValue.lastIndexOf(decimal);\n    if (decimalIndex === -1) {\n      decimalIndex = rawValue.length;\n      rawValue += decimal;\n    }\n    let decimalPortion = rawValue.substring(decimalIndex).replace(this._onlyNumbersRegex, '');\n    const actualPrecision = decimalPortion.length;\n    if (actualPrecision < precision) {\n      for (let i = actualPrecision; i < precision; i++) {\n        decimalPortion += '0';\n      }\n    } else if (actualPrecision > precision) {\n      decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n    }\n    return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n  }\n  clearMask(rawValue) {\n    if (this.isNullable() && rawValue === '') return null;\n    let value = (rawValue || '0').replace(this._options.prefix, '').replace(this._options.suffix, '');\n    if (this._options.thousands) {\n      value = value.replace(new RegExp('\\\\' + this._options.thousands, 'g'), '');\n    }\n    if (this._options.decimal) {\n      value = value.replace(this._options.decimal, '.');\n    }\n    this._perArNumber.forEach((val, key) => {\n      const re = new RegExp(key, 'g');\n      value = value.replace(re, val);\n    });\n    return parseFloat(value);\n  }\n  changeToNegative() {\n    if (this._options.allowNegative /*&& this.rawValue != \"\"*/ && this.rawValue?.charAt(0) != '-' /*&& this.value != 0*/) {\n      // Apply the mask to ensure the min and max values are enforced.\n      this.rawValue = this.applyMask(false, '-' + (this.rawValue ? this.rawValue : '0'));\n    }\n  }\n  changeToPositive() {\n    // Apply the mask to ensure the min and max values are enforced.\n    this.rawValue = this.applyMask(false, this.rawValue?.replace('-', '') ?? '');\n  }\n  removeNumber(keyCode) {\n    const {\n      decimal,\n      thousands,\n      prefix,\n      suffix,\n      inputMode\n    } = this._options;\n    if (this.isNullable() && this.value == 0) {\n      this.rawValue = null;\n      return;\n    }\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n    const suffixStart = (this.rawValue?.length ?? 0) - suffix.length;\n    selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n    selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\n    // Check if selection was entirely in the prefix or suffix.\n    if (selectionStart === selectionEnd && this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n      this.updateFieldValue(selectionStart);\n      return;\n    }\n    let decimalIndex = this.rawValue?.indexOf(decimal) ?? -1;\n    if (decimalIndex === -1) {\n      decimalIndex = this.rawValue?.length ?? 0;\n    }\n    let shiftSelection = 0;\n    let insertChars = '';\n    const isCursorInDecimals = decimalIndex < selectionEnd;\n    const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\n    if (selectionEnd === selectionStart) {\n      if (keyCode == 8) {\n        if (selectionStart <= prefix.length) {\n          return;\n        }\n        selectionStart--;\n        // If previous char isn't a number, go back one more.\n        if (!this.rawValue?.substring(selectionStart, selectionStart + 1).match(/\\d/)) {\n          selectionStart--;\n        }\n        // In natural mode, jump backwards when in decimal portion of number.\n        if (inputMode === NgxCurrencyInputMode.Natural && isCursorInDecimals) {\n          shiftSelection = -1;\n          // when removing a single whole number, replace it with 0\n          if (isCursorImmediatelyAfterDecimalPoint && (this.value ?? 0) < 10 && (this.value ?? 0) > -10) {\n            insertChars += '0';\n          }\n        }\n      } else if (keyCode == 46 || keyCode == 63272) {\n        if (selectionStart === suffixStart) {\n          return;\n        }\n        selectionEnd++;\n        // If next char isn't a number, go one more.\n        if (!this.rawValue?.substring(selectionStart, selectionStart + 1).match(/\\d/)) {\n          selectionStart++;\n          selectionEnd++;\n        }\n      }\n    }\n    // In natural mode, replace decimals with 0s.\n    if (inputMode === NgxCurrencyInputMode.Natural && selectionStart > decimalIndex) {\n      const replacedDecimalCount = selectionEnd - selectionStart;\n      for (let i = 0; i < replacedDecimalCount; i++) {\n        insertChars += '0';\n      }\n    }\n    let selectionFromEnd = (this.rawValue?.length ?? 0) - selectionEnd;\n    this.rawValue = this.rawValue?.substring(0, selectionStart) + insertChars + this.rawValue?.substring(selectionEnd);\n    // Remove leading thousand separator from raw value.\n    const startChar = this.rawValue.substring(prefix.length, prefix.length + 1);\n    if (startChar === thousands) {\n      this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n      selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n    }\n    this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n  }\n  updateFieldValue(selectionStart, disablePadAndTrim = false) {\n    const newRawValue = this.applyMask(false, this.rawValue ?? '', disablePadAndTrim);\n    selectionStart ??= this.rawValue?.length ?? 0;\n    selectionStart = Math.max(this._options.prefix.length, Math.min(selectionStart, (this.rawValue?.length ?? 0) - this._options.suffix.length));\n    this.inputManager.updateValueAndCursor(newRawValue, this.rawValue?.length ?? 0, selectionStart);\n  }\n  updateOptions(options) {\n    const value = this.value;\n    this._options = options;\n    this.value = value;\n  }\n  prefixLength() {\n    return this._options.prefix.length;\n  }\n  suffixLength() {\n    return this._options.suffix.length;\n  }\n  isNullable() {\n    return this._options.nullable;\n  }\n  get canInputMoreNumbers() {\n    return this.inputManager.canInputMoreNumbers;\n  }\n  get inputSelection() {\n    return this.inputManager.inputSelection;\n  }\n  get rawValue() {\n    return this.inputManager.rawValue;\n  }\n  set rawValue(value) {\n    this.inputManager.rawValue = value;\n  }\n  get storedRawValue() {\n    return this.inputManager.storedRawValue;\n  }\n  get value() {\n    return this.clearMask(this.rawValue);\n  }\n  set value(value) {\n    this.rawValue = this.applyMask(true, '' + value);\n  }\n  _isNullOrUndefined(value) {\n    return value === null || value === undefined;\n  }\n}\nclass InputHandler {\n  constructor(htmlInputElement, options) {\n    this.inputService = new InputService(htmlInputElement, options);\n  }\n  handleCut() {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n  handleInput() {\n    const rawValue = this.inputService.rawValue ?? '';\n    const selectionStart = this.inputService.inputSelection.selectionStart;\n    const keyCode = rawValue.charCodeAt(selectionStart - 1);\n    const rawValueLength = rawValue.length;\n    const storedRawValueLength = this.inputService.storedRawValue.length;\n    if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n      this.inputService.updateFieldValue(selectionStart);\n      this.onModelChange(this.inputService.value);\n      return;\n    }\n    // Restore the old value.\n    this.inputService.rawValue = this.inputService.storedRawValue;\n    if (rawValueLength < storedRawValueLength) {\n      // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n      // input event, so we need to wrap this in a timeout.\n      this.timer(() => {\n        // Move the cursor to just after the deleted value.\n        this.inputService.updateFieldValue(selectionStart + 1);\n        // Then backspace it.\n        this.inputService.removeNumber(8);\n        this.onModelChange(this.inputService.value);\n      }, 0);\n    }\n    if (rawValueLength > storedRawValueLength) {\n      // Move the cursor to just before the new value.\n      this.inputService.updateFieldValue(selectionStart - 1);\n      // Process the character like a keypress.\n      this._handleKeypressImpl(keyCode);\n    }\n  }\n  handleKeydown(event) {\n    const keyCode = event.which || event.charCode || event.keyCode;\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n      if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() && this.inputService.inputSelection.selectionEnd >= (this.inputService.rawValue?.length ?? 0) - this.inputService.suffixLength()) {\n        this.clearValue();\n      } else {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n  clearValue() {\n    this.setValue(this.inputService.isNullable() ? null : 0);\n    this.onModelChange(this.inputService.value);\n  }\n  handleKeypress(event) {\n    const keyCode = event.which || event.charCode || event.keyCode;\n    event.preventDefault();\n    if (keyCode === 97 && event.ctrlKey) {\n      return;\n    }\n    this._handleKeypressImpl(keyCode);\n  }\n  _handleKeypressImpl(keyCode) {\n    switch (keyCode) {\n      case undefined:\n      case 9:\n      case 13:\n        return;\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n      default:\n        if (this.inputService.canInputMoreNumbers) {\n          const selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n          if (selectionRangeLength == (this.inputService.rawValue?.length ?? 0)) {\n            this.setValue(null);\n          }\n          this.inputService.addNumber(keyCode);\n        }\n        break;\n    }\n    this.onModelChange(this.inputService.value);\n  }\n  handlePaste() {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n  updateOptions(options) {\n    this.inputService.updateOptions(options);\n  }\n  getOnModelChange() {\n    return this.onModelChange;\n  }\n  setOnModelChange(callbackFunction) {\n    this.onModelChange = callbackFunction;\n  }\n  getOnModelTouched() {\n    return this.onModelTouched;\n  }\n  setOnModelTouched(callbackFunction) {\n    this.onModelTouched = callbackFunction;\n  }\n  setValue(value) {\n    this.inputService.value = value;\n  }\n  /**\n   * Passthrough to setTimeout that can be stubbed out in tests.\n   */\n  timer(callback, delayMilliseconds) {\n    setTimeout(callback, delayMilliseconds);\n  }\n}\nclass NgxCurrencyDirective {\n  constructor(globalOptions, keyValueDiffers, _elementRef) {\n    this._elementRef = _elementRef;\n    this.options = {};\n    this._optionsTemplate = {\n      align: 'right',\n      allowNegative: true,\n      allowZero: true,\n      decimal: '.',\n      precision: 2,\n      prefix: '$ ',\n      suffix: '',\n      thousands: ',',\n      nullable: false,\n      inputMode: NgxCurrencyInputMode.Financial,\n      ...globalOptions\n    };\n    this._keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n  ngOnInit() {\n    this._inputHandler = new InputHandler(this._elementRef.nativeElement, {\n      ...this._optionsTemplate,\n      ...this.options\n    });\n  }\n  ngAfterViewInit() {\n    this._elementRef.nativeElement.style.textAlign = this.options?.align ?? this._optionsTemplate.align;\n  }\n  ngDoCheck() {\n    if (this._keyValueDiffer.diff(this.options)) {\n      this._elementRef.nativeElement.style.textAlign = this.options?.align ?? this._optionsTemplate.align;\n      this._inputHandler.updateOptions({\n        ...this._optionsTemplate,\n        ...this.options\n      });\n    }\n  }\n  handleBlur(event) {\n    this._inputHandler.getOnModelTouched().apply(event);\n  }\n  handleCut() {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleCut();\n    }\n  }\n  handleInput() {\n    if (this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleInput();\n    }\n  }\n  handleKeydown(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleKeydown(event);\n    }\n  }\n  handleKeypress(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handleKeypress(event);\n    }\n  }\n  handlePaste() {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this._inputHandler.handlePaste();\n    }\n  }\n  handleDrop(event) {\n    if (!this.isChromeAndroid()) {\n      event.preventDefault();\n    }\n  }\n  isChromeAndroid() {\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n  }\n  isReadOnly() {\n    return this._elementRef.nativeElement.hasAttribute('readonly');\n  }\n  registerOnChange(callbackFunction) {\n    this._inputHandler.setOnModelChange(callbackFunction);\n  }\n  registerOnTouched(callbackFunction) {\n    this._inputHandler.setOnModelTouched(callbackFunction);\n  }\n  setDisabledState(isDisabled) {\n    this._elementRef.nativeElement.disabled = isDisabled;\n  }\n  writeValue(value) {\n    this._inputHandler.setValue(value);\n  }\n}\n_class = NgxCurrencyDirective;\n_class.ɵfac = function _class_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(NGX_CURRENCY_CONFIG, 8), i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_class.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _class,\n  selectors: [[\"\", \"currencyMask\", \"\"]],\n  hostBindings: function _class_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"blur\", function _class_blur_HostBindingHandler($event) {\n        return ctx.handleBlur($event);\n      })(\"cut\", function _class_cut_HostBindingHandler() {\n        return ctx.handleCut();\n      })(\"input\", function _class_input_HostBindingHandler() {\n        return ctx.handleInput();\n      })(\"keydown\", function _class_keydown_HostBindingHandler($event) {\n        return ctx.handleKeydown($event);\n      })(\"keypress\", function _class_keypress_HostBindingHandler($event) {\n        return ctx.handleKeypress($event);\n      })(\"paste\", function _class_paste_HostBindingHandler() {\n        return ctx.handlePaste();\n      })(\"drop\", function _class_drop_HostBindingHandler($event) {\n        return ctx.handleDrop($event);\n      });\n    }\n  },\n  inputs: {\n    options: \"options\"\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => _class),\n    multi: true\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxCurrencyDirective, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: '[currencyMask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgxCurrencyDirective),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NGX_CURRENCY_CONFIG]\n      }]\n    }, {\n      type: i0.KeyValueDiffers\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    handleBlur: [{\n      type: HostListener,\n      args: ['blur', ['$event']]\n    }],\n    handleCut: [{\n      type: HostListener,\n      args: ['cut']\n    }],\n    handleInput: [{\n      type: HostListener,\n      args: ['input']\n    }],\n    handleKeydown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    handleKeypress: [{\n      type: HostListener,\n      args: ['keypress', ['$event']]\n    }],\n    handlePaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    handleDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\nfunction provideEnvironmentNgxCurrency(config) {\n  return makeEnvironmentProviders([{\n    provide: NGX_CURRENCY_CONFIG,\n    useValue: config\n  }]);\n}\n\n/*\n * Public API Surface of ngx-currency\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_CURRENCY_CONFIG, NgxCurrencyDirective, NgxCurrencyInputMode, provideEnvironmentNgxCurrency };","map":{"version":3,"names":["i0","InjectionToken","forwardRef","Directive","Optional","Inject","Input","HostListener","makeEnvironmentProviders","NG_VALUE_ACCESSOR","NgxCurrencyInputMode","NGX_CURRENCY_CONFIG","InputManager","constructor","_htmlInputElement","_storedRawValue","setCursorAt","position","focus","setSelectionRange","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","newLength","length","canInputMoreNumbers","onlyNumbers","replace","hasReachedMaxLength","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","storedRawValue","InputService","htmlInputElement","_options","_singleDigitRegex","RegExp","_onlyNumbersRegex","_perArNumber","Map","inputManager","addNumber","keyCode","decimal","precision","inputMode","keyChar","String","fromCharCode","isDecimalChar","applyMask","undefined","Natural","indexOf","updateFieldValue","rawValueStart","rawValueEnd","inDecimalPortion","newValue","nextSelectionStart","isDecimalOrThousands","thousands","test","isNumber","disablePadAndTrim","allowNegative","prefix","suffix","min","max","Number","toFixed","padOrTrimPrecision","integerPart","slice","integerValue","parseInt","startsWith","decimalPart","decimalValue","isNegative","Math","divideBy","padEnd","repeat","operator","decimalIndex","lastIndexOf","decimalPortion","actualPrecision","i","clearMask","isNullable","forEach","val","key","re","parseFloat","changeToNegative","charAt","changeToPositive","removeNumber","suffixStart","shiftSelection","insertChars","isCursorInDecimals","isCursorImmediatelyAfterDecimalPoint","replacedDecimalCount","selectionFromEnd","startChar","updateOptions","options","prefixLength","suffixLength","nullable","_isNullOrUndefined","InputHandler","inputService","handleCut","setTimeout","setValue","onModelChange","handleInput","charCodeAt","rawValueLength","storedRawValueLength","abs","timer","_handleKeypressImpl","handleKeydown","event","which","charCode","preventDefault","clearValue","handleKeypress","ctrlKey","selectionRangeLength","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","callback","delayMilliseconds","NgxCurrencyDirective","globalOptions","keyValueDiffers","_elementRef","_optionsTemplate","align","allowZero","Financial","_keyValueDiffer","find","create","ngOnInit","_inputHandler","nativeElement","ngAfterViewInit","style","textAlign","ngDoCheck","diff","handleBlur","apply","isChromeAndroid","isReadOnly","handleDrop","navigator","userAgent","hasAttribute","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","writeValue","_class","ɵfac","_class_Factory","t","ɵɵdirectiveInject","KeyValueDiffers","ElementRef","ɵdir","ɵɵdefineDirective","type","selectors","hostBindings","_class_HostBindings","rf","ctx","ɵɵlistener","_class_blur_HostBindingHandler","$event","_class_cut_HostBindingHandler","_class_input_HostBindingHandler","_class_keydown_HostBindingHandler","_class_keypress_HostBindingHandler","_class_paste_HostBindingHandler","_class_drop_HostBindingHandler","inputs","standalone","features","ɵɵProvidersFeature","provide","useExisting","multi","ngDevMode","ɵsetClassMetadata","args","selector","providers","decorators","provideEnvironmentNgxCurrency","config","useValue"],"sources":["/home/coder/project/workspace/angularapp/node_modules/ngx-currency/fesm2022/ngx-currency.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, makeEnvironmentProviders } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nvar NgxCurrencyInputMode;\n(function (NgxCurrencyInputMode) {\n    NgxCurrencyInputMode[NgxCurrencyInputMode[\"Financial\"] = 0] = \"Financial\";\n    NgxCurrencyInputMode[NgxCurrencyInputMode[\"Natural\"] = 1] = \"Natural\";\n})(NgxCurrencyInputMode || (NgxCurrencyInputMode = {}));\nconst NGX_CURRENCY_CONFIG = new InjectionToken('ngx-currency.config');\n\nclass InputManager {\n    constructor(_htmlInputElement) {\n        this._htmlInputElement = _htmlInputElement;\n        this._storedRawValue = null;\n    }\n    setCursorAt(position) {\n        this._htmlInputElement.focus();\n        this._htmlInputElement.setSelectionRange(position, position);\n    }\n    updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n        this.rawValue = newRawValue;\n        const newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n    get canInputMoreNumbers() {\n        const onlyNumbers = this.rawValue?.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, '') ?? '';\n        const hasReachedMaxLength = !(onlyNumbers.length >= this._htmlInputElement.maxLength &&\n            this._htmlInputElement.maxLength >= 0);\n        const selectionStart = this.inputSelection.selectionStart;\n        const selectionEnd = this.inputSelection.selectionEnd;\n        const haveNumberSelected = !!(selectionStart != selectionEnd &&\n            this._htmlInputElement.value\n                .substring(selectionStart, selectionEnd)\n                .match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n        const startWithZero = this._htmlInputElement.value.substring(0, 1) == '0';\n        return hasReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n    get inputSelection() {\n        return {\n            selectionStart: this._htmlInputElement.selectionStart ?? 0,\n            selectionEnd: this._htmlInputElement.selectionEnd ?? 0,\n        };\n    }\n    get rawValue() {\n        return this._htmlInputElement && this._htmlInputElement.value;\n    }\n    set rawValue(value) {\n        this._storedRawValue = value;\n        if (this._htmlInputElement) {\n            this._htmlInputElement.value = value ?? '';\n        }\n    }\n    get storedRawValue() {\n        return this._storedRawValue || '';\n    }\n}\n\nclass InputService {\n    constructor(htmlInputElement, _options) {\n        this._options = _options;\n        this._singleDigitRegex = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n        this._onlyNumbersRegex = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n        this._perArNumber = new Map([\n            ['\\u06F0', '0'],\n            ['\\u06F1', '1'],\n            ['\\u06F2', '2'],\n            ['\\u06F3', '3'],\n            ['\\u06F4', '4'],\n            ['\\u06F5', '5'],\n            ['\\u06F6', '6'],\n            ['\\u06F7', '7'],\n            ['\\u06F8', '8'],\n            ['\\u06F9', '9'],\n            ['\\u0660', '0'],\n            ['\\u0661', '1'],\n            ['\\u0662', '2'],\n            ['\\u0663', '3'],\n            ['\\u0664', '4'],\n            ['\\u0665', '5'],\n            ['\\u0666', '6'],\n            ['\\u0667', '7'],\n            ['\\u0668', '8'],\n            ['\\u0669', '9'],\n        ]);\n        this.inputManager = new InputManager(htmlInputElement);\n    }\n    addNumber(keyCode) {\n        const { decimal, precision, inputMode } = this._options;\n        const keyChar = String.fromCharCode(keyCode);\n        const isDecimalChar = keyChar === this._options.decimal;\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, keyChar);\n            let selectionStart = undefined;\n            if (inputMode === NgxCurrencyInputMode.Natural && precision > 0) {\n                selectionStart = this.rawValue.indexOf(decimal);\n                if (isDecimalChar) {\n                    selectionStart++;\n                }\n            }\n            this.updateFieldValue(selectionStart);\n        }\n        else {\n            const selectionStart = this.inputSelection.selectionStart;\n            const selectionEnd = this.inputSelection.selectionEnd;\n            const rawValueStart = this.rawValue.substring(0, selectionStart);\n            let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\n            // In natural mode, replace decimals instead of shifting them.\n            const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n            if (inputMode === NgxCurrencyInputMode.Natural &&\n                inDecimalPortion &&\n                selectionStart === selectionEnd) {\n                rawValueEnd = rawValueEnd.substring(1);\n            }\n            const newValue = rawValueStart + keyChar + rawValueEnd;\n            let nextSelectionStart = selectionStart + 1;\n            const isDecimalOrThousands = isDecimalChar || keyChar === this._options.thousands;\n            if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n                // If the cursor is just before the decimal or thousands separator and the user types the\n                // decimal or thousands separator, move the cursor past it.\n                nextSelectionStart++;\n            }\n            else if (!this._singleDigitRegex.test(keyChar)) {\n                // Ignore other non-numbers.\n                return;\n            }\n            this.rawValue = newValue;\n            this.updateFieldValue(nextSelectionStart);\n        }\n    }\n    applyMask(isNumber, rawValue, disablePadAndTrim = false) {\n        const { allowNegative, decimal, precision, prefix, suffix, thousands, min, inputMode, } = this._options;\n        let { max } = this._options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(this._onlyNumbersRegex, '');\n        if (!onlyNumbers && rawValue !== decimal) {\n            return '';\n        }\n        if (inputMode === NgxCurrencyInputMode.Natural &&\n            !isNumber &&\n            !disablePadAndTrim) {\n            rawValue = this.padOrTrimPrecision(rawValue);\n            onlyNumbers = rawValue.replace(this._onlyNumbersRegex, '');\n        }\n        let integerPart = onlyNumbers\n            .slice(0, onlyNumbers.length - precision)\n            .replace(/^\\u0660*/g, '')\n            .replace(/^\\u06F0*/g, '')\n            .replace(/^0*/g, '');\n        if (integerPart == '') {\n            integerPart = '0';\n        }\n        const integerValue = parseInt(integerPart);\n        integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n        if (thousands && integerPart.startsWith(thousands)) {\n            integerPart = integerPart.substring(1);\n        }\n        let newRawValue = integerPart;\n        const decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        const decimalValue = parseInt(decimalPart) || 0;\n        const isNegative = rawValue.indexOf('-') > -1;\n        // Ensure max is at least as large as min.\n        max =\n            max === null || max === undefined || min === null || min === undefined\n                ? max\n                : Math.max(max, min);\n        // Ensure precision number works well with more than 2 digits\n        // 23 / 100... 233 / 1000 and so on\n        const divideBy = Number('1'.padEnd(precision + 1, '0'));\n        // Restrict to the min and max values.\n        let newValue = integerValue + decimalValue / divideBy;\n        newValue = isNegative ? -newValue : newValue;\n        if (max !== null && max !== undefined && newValue > max) {\n            return this.applyMask(true, max + '');\n        }\n        else if (min !== null && min !== undefined && newValue < min) {\n            return this.applyMask(true, min + '');\n        }\n        if (precision > 0) {\n            if (newRawValue == '0' && decimalPart.length < precision) {\n                newRawValue += decimal + '0'.repeat(precision - 1) + decimalPart;\n            }\n            else {\n                newRawValue += decimal + decimalPart;\n            }\n        }\n        // let isZero = newValue == 0;\n        const operator = isNegative && allowNegative /*&& !isZero */ ? '-' : '';\n        return operator + prefix + newRawValue + suffix;\n    }\n    padOrTrimPrecision(rawValue) {\n        const { decimal, precision } = this._options;\n        let decimalIndex = rawValue.lastIndexOf(decimal);\n        if (decimalIndex === -1) {\n            decimalIndex = rawValue.length;\n            rawValue += decimal;\n        }\n        let decimalPortion = rawValue\n            .substring(decimalIndex)\n            .replace(this._onlyNumbersRegex, '');\n        const actualPrecision = decimalPortion.length;\n        if (actualPrecision < precision) {\n            for (let i = actualPrecision; i < precision; i++) {\n                decimalPortion += '0';\n            }\n        }\n        else if (actualPrecision > precision) {\n            decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n        }\n        return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n    }\n    clearMask(rawValue) {\n        if (this.isNullable() && rawValue === '')\n            return null;\n        let value = (rawValue || '0')\n            .replace(this._options.prefix, '')\n            .replace(this._options.suffix, '');\n        if (this._options.thousands) {\n            value = value.replace(new RegExp('\\\\' + this._options.thousands, 'g'), '');\n        }\n        if (this._options.decimal) {\n            value = value.replace(this._options.decimal, '.');\n        }\n        this._perArNumber.forEach((val, key) => {\n            const re = new RegExp(key, 'g');\n            value = value.replace(re, val);\n        });\n        return parseFloat(value);\n    }\n    changeToNegative() {\n        if (this._options.allowNegative /*&& this.rawValue != \"\"*/ &&\n            this.rawValue?.charAt(0) != '-' /*&& this.value != 0*/) {\n            // Apply the mask to ensure the min and max values are enforced.\n            this.rawValue = this.applyMask(false, '-' + (this.rawValue ? this.rawValue : '0'));\n        }\n    }\n    changeToPositive() {\n        // Apply the mask to ensure the min and max values are enforced.\n        this.rawValue = this.applyMask(false, this.rawValue?.replace('-', '') ?? '');\n    }\n    removeNumber(keyCode) {\n        const { decimal, thousands, prefix, suffix, inputMode } = this._options;\n        if (this.isNullable() && this.value == 0) {\n            this.rawValue = null;\n            return;\n        }\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n        const suffixStart = (this.rawValue?.length ?? 0) - suffix.length;\n        selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n        selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\n        // Check if selection was entirely in the prefix or suffix.\n        if (selectionStart === selectionEnd &&\n            this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n            this.updateFieldValue(selectionStart);\n            return;\n        }\n        let decimalIndex = this.rawValue?.indexOf(decimal) ?? -1;\n        if (decimalIndex === -1) {\n            decimalIndex = this.rawValue?.length ?? 0;\n        }\n        let shiftSelection = 0;\n        let insertChars = '';\n        const isCursorInDecimals = decimalIndex < selectionEnd;\n        const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\n        if (selectionEnd === selectionStart) {\n            if (keyCode == 8) {\n                if (selectionStart <= prefix.length) {\n                    return;\n                }\n                selectionStart--;\n                // If previous char isn't a number, go back one more.\n                if (!this.rawValue\n                    ?.substring(selectionStart, selectionStart + 1)\n                    .match(/\\d/)) {\n                    selectionStart--;\n                }\n                // In natural mode, jump backwards when in decimal portion of number.\n                if (inputMode === NgxCurrencyInputMode.Natural && isCursorInDecimals) {\n                    shiftSelection = -1;\n                    // when removing a single whole number, replace it with 0\n                    if (isCursorImmediatelyAfterDecimalPoint &&\n                        (this.value ?? 0) < 10 &&\n                        (this.value ?? 0) > -10) {\n                        insertChars += '0';\n                    }\n                }\n            }\n            else if (keyCode == 46 || keyCode == 63272) {\n                if (selectionStart === suffixStart) {\n                    return;\n                }\n                selectionEnd++;\n                // If next char isn't a number, go one more.\n                if (!this.rawValue\n                    ?.substring(selectionStart, selectionStart + 1)\n                    .match(/\\d/)) {\n                    selectionStart++;\n                    selectionEnd++;\n                }\n            }\n        }\n        // In natural mode, replace decimals with 0s.\n        if (inputMode === NgxCurrencyInputMode.Natural &&\n            selectionStart > decimalIndex) {\n            const replacedDecimalCount = selectionEnd - selectionStart;\n            for (let i = 0; i < replacedDecimalCount; i++) {\n                insertChars += '0';\n            }\n        }\n        let selectionFromEnd = (this.rawValue?.length ?? 0) - selectionEnd;\n        this.rawValue =\n            this.rawValue?.substring(0, selectionStart) +\n                insertChars +\n                this.rawValue?.substring(selectionEnd);\n        // Remove leading thousand separator from raw value.\n        const startChar = this.rawValue.substring(prefix.length, prefix.length + 1);\n        if (startChar === thousands) {\n            this.rawValue =\n                this.rawValue.substring(0, prefix.length) +\n                    this.rawValue.substring(prefix.length + 1);\n            selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n        }\n        this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n    }\n    updateFieldValue(selectionStart, disablePadAndTrim = false) {\n        const newRawValue = this.applyMask(false, this.rawValue ?? '', disablePadAndTrim);\n        selectionStart ??= this.rawValue?.length ?? 0;\n        selectionStart = Math.max(this._options.prefix.length, Math.min(selectionStart, (this.rawValue?.length ?? 0) - this._options.suffix.length));\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue?.length ?? 0, selectionStart);\n    }\n    updateOptions(options) {\n        const value = this.value;\n        this._options = options;\n        this.value = value;\n    }\n    prefixLength() {\n        return this._options.prefix.length;\n    }\n    suffixLength() {\n        return this._options.suffix.length;\n    }\n    isNullable() {\n        return this._options.nullable;\n    }\n    get canInputMoreNumbers() {\n        return this.inputManager.canInputMoreNumbers;\n    }\n    get inputSelection() {\n        return this.inputManager.inputSelection;\n    }\n    get rawValue() {\n        return this.inputManager.rawValue;\n    }\n    set rawValue(value) {\n        this.inputManager.rawValue = value;\n    }\n    get storedRawValue() {\n        return this.inputManager.storedRawValue;\n    }\n    get value() {\n        return this.clearMask(this.rawValue);\n    }\n    set value(value) {\n        this.rawValue = this.applyMask(true, '' + value);\n    }\n    _isNullOrUndefined(value) {\n        return value === null || value === undefined;\n    }\n}\n\nclass InputHandler {\n    constructor(htmlInputElement, options) {\n        this.inputService = new InputService(htmlInputElement, options);\n    }\n    handleCut() {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n    handleInput() {\n        const rawValue = this.inputService.rawValue ?? '';\n        const selectionStart = this.inputService.inputSelection.selectionStart;\n        const keyCode = rawValue.charCodeAt(selectionStart - 1);\n        const rawValueLength = rawValue.length;\n        const storedRawValueLength = this.inputService.storedRawValue.length;\n        if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n            this.inputService.updateFieldValue(selectionStart);\n            this.onModelChange(this.inputService.value);\n            return;\n        }\n        // Restore the old value.\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if (rawValueLength < storedRawValueLength) {\n            // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n            // input event, so we need to wrap this in a timeout.\n            this.timer(() => {\n                // Move the cursor to just after the deleted value.\n                this.inputService.updateFieldValue(selectionStart + 1);\n                // Then backspace it.\n                this.inputService.removeNumber(8);\n                this.onModelChange(this.inputService.value);\n            }, 0);\n        }\n        if (rawValueLength > storedRawValueLength) {\n            // Move the cursor to just before the new value.\n            this.inputService.updateFieldValue(selectionStart - 1);\n            // Process the character like a keypress.\n            this._handleKeypressImpl(keyCode);\n        }\n    }\n    handleKeydown(event) {\n        const keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            if (this.inputService.inputSelection.selectionStart <=\n                this.inputService.prefixLength() &&\n                this.inputService.inputSelection.selectionEnd >=\n                    (this.inputService.rawValue?.length ?? 0) -\n                        this.inputService.suffixLength()) {\n                this.clearValue();\n            }\n            else {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n    clearValue() {\n        this.setValue(this.inputService.isNullable() ? null : 0);\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeypress(event) {\n        const keyCode = event.which || event.charCode || event.keyCode;\n        event.preventDefault();\n        if (keyCode === 97 && event.ctrlKey) {\n            return;\n        }\n        this._handleKeypressImpl(keyCode);\n    }\n    _handleKeypressImpl(keyCode) {\n        switch (keyCode) {\n            case undefined:\n            case 9:\n            case 13:\n                return;\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers) {\n                    const selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd -\n                        this.inputService.inputSelection.selectionStart);\n                    if (selectionRangeLength == (this.inputService.rawValue?.length ?? 0)) {\n                        this.setValue(null);\n                    }\n                    this.inputService.addNumber(keyCode);\n                }\n                break;\n        }\n        this.onModelChange(this.inputService.value);\n    }\n    handlePaste() {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n    updateOptions(options) {\n        this.inputService.updateOptions(options);\n    }\n    getOnModelChange() {\n        return this.onModelChange;\n    }\n    setOnModelChange(callbackFunction) {\n        this.onModelChange = callbackFunction;\n    }\n    getOnModelTouched() {\n        return this.onModelTouched;\n    }\n    setOnModelTouched(callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    }\n    setValue(value) {\n        this.inputService.value = value;\n    }\n    /**\n     * Passthrough to setTimeout that can be stubbed out in tests.\n     */\n    timer(callback, delayMilliseconds) {\n        setTimeout(callback, delayMilliseconds);\n    }\n}\n\nclass NgxCurrencyDirective {\n    constructor(globalOptions, keyValueDiffers, _elementRef) {\n        this._elementRef = _elementRef;\n        this.options = {};\n        this._optionsTemplate = {\n            align: 'right',\n            allowNegative: true,\n            allowZero: true,\n            decimal: '.',\n            precision: 2,\n            prefix: '$ ',\n            suffix: '',\n            thousands: ',',\n            nullable: false,\n            inputMode: NgxCurrencyInputMode.Financial,\n            ...globalOptions,\n        };\n        this._keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n    ngOnInit() {\n        this._inputHandler = new InputHandler(this._elementRef.nativeElement, {\n            ...this._optionsTemplate,\n            ...this.options,\n        });\n    }\n    ngAfterViewInit() {\n        this._elementRef.nativeElement.style.textAlign =\n            this.options?.align ?? this._optionsTemplate.align;\n    }\n    ngDoCheck() {\n        if (this._keyValueDiffer.diff(this.options)) {\n            this._elementRef.nativeElement.style.textAlign =\n                this.options?.align ?? this._optionsTemplate.align;\n            this._inputHandler.updateOptions({\n                ...this._optionsTemplate,\n                ...this.options,\n            });\n        }\n    }\n    handleBlur(event) {\n        this._inputHandler.getOnModelTouched().apply(event);\n    }\n    handleCut() {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this._inputHandler.handleCut();\n        }\n    }\n    handleInput() {\n        if (this.isChromeAndroid()) {\n            !this.isReadOnly() && this._inputHandler.handleInput();\n        }\n    }\n    handleKeydown(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this._inputHandler.handleKeydown(event);\n        }\n    }\n    handleKeypress(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this._inputHandler.handleKeypress(event);\n        }\n    }\n    handlePaste() {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this._inputHandler.handlePaste();\n        }\n    }\n    handleDrop(event) {\n        if (!this.isChromeAndroid()) {\n            event.preventDefault();\n        }\n    }\n    isChromeAndroid() {\n        return (/chrome/i.test(navigator.userAgent) &&\n            /android/i.test(navigator.userAgent));\n    }\n    isReadOnly() {\n        return this._elementRef.nativeElement.hasAttribute('readonly');\n    }\n    registerOnChange(callbackFunction) {\n        this._inputHandler.setOnModelChange(callbackFunction);\n    }\n    registerOnTouched(callbackFunction) {\n        this._inputHandler.setOnModelTouched(callbackFunction);\n    }\n    setDisabledState(isDisabled) {\n        this._elementRef.nativeElement.disabled = isDisabled;\n    }\n    writeValue(value) {\n        this._inputHandler.setValue(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: NgxCurrencyDirective, deps: [{ token: NGX_CURRENCY_CONFIG, optional: true }, { token: i0.KeyValueDiffers }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: NgxCurrencyDirective, isStandalone: true, selector: \"[currencyMask]\", inputs: { options: \"options\" }, host: { listeners: { \"blur\": \"handleBlur($event)\", \"cut\": \"handleCut()\", \"input\": \"handleInput()\", \"keydown\": \"handleKeydown($event)\", \"keypress\": \"handleKeypress($event)\", \"paste\": \"handlePaste()\", \"drop\": \"handleDrop($event)\" } }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => NgxCurrencyDirective),\n                multi: true,\n            },\n        ], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: NgxCurrencyDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    standalone: true,\n                    selector: '[currencyMask]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => NgxCurrencyDirective),\n                            multi: true,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NGX_CURRENCY_CONFIG]\n                }] }, { type: i0.KeyValueDiffers }, { type: i0.ElementRef }]; }, propDecorators: { options: [{\n                type: Input\n            }], handleBlur: [{\n                type: HostListener,\n                args: ['blur', ['$event']]\n            }], handleCut: [{\n                type: HostListener,\n                args: ['cut']\n            }], handleInput: [{\n                type: HostListener,\n                args: ['input']\n            }], handleKeydown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], handleKeypress: [{\n                type: HostListener,\n                args: ['keypress', ['$event']]\n            }], handlePaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], handleDrop: [{\n                type: HostListener,\n                args: ['drop', ['$event']]\n            }] } });\n\nfunction provideEnvironmentNgxCurrency(config) {\n    return makeEnvironmentProviders([\n        {\n            provide: NGX_CURRENCY_CONFIG,\n            useValue: config,\n        },\n    ]);\n}\n\n/*\n * Public API Surface of ngx-currency\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_CURRENCY_CONFIG, NgxCurrencyDirective, NgxCurrencyInputMode, provideEnvironmentNgxCurrency };\n"],"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,cAAc,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,EAAEC,YAAY,EAAEC,wBAAwB,QAAQ,eAAe;AACtI,SAASC,iBAAiB,QAAQ,gBAAgB;AAElD,IAAIC,oBAAoB;AACxB,CAAC,UAAUA,oBAAoB,EAAE;EAC7BA,oBAAoB,CAACA,oBAAoB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACzEA,oBAAoB,CAACA,oBAAoB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;AACzE,CAAC,EAAEA,oBAAoB,KAAKA,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC;AACvD,MAAMC,mBAAmB,GAAG,IAAIV,cAAc,CAAC,qBAAqB,CAAC;AAErE,MAAMW,YAAY,CAAC;EACfC,WAAWA,CAACC,iBAAiB,EAAE;IAC3B,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,eAAe,GAAG,IAAI;EAC/B;EACAC,WAAWA,CAACC,QAAQ,EAAE;IAClB,IAAI,CAACH,iBAAiB,CAACI,KAAK,CAAC,CAAC;IAC9B,IAAI,CAACJ,iBAAiB,CAACK,iBAAiB,CAACF,QAAQ,EAAEA,QAAQ,CAAC;EAChE;EACAG,oBAAoBA,CAACC,WAAW,EAAEC,SAAS,EAAEC,cAAc,EAAE;IACzD,IAAI,CAACC,QAAQ,GAAGH,WAAW;IAC3B,MAAMI,SAAS,GAAGJ,WAAW,CAACK,MAAM;IACpCH,cAAc,GAAGA,cAAc,IAAID,SAAS,GAAGG,SAAS,CAAC;IACzD,IAAI,CAACT,WAAW,CAACO,cAAc,CAAC;EACpC;EACA,IAAII,mBAAmBA,CAAA,EAAG;IACtB,MAAMC,WAAW,GAAG,IAAI,CAACJ,QAAQ,EAAEK,OAAO,CAAC,mCAAmC,EAAE,EAAE,CAAC,IAAI,EAAE;IACzF,MAAMC,mBAAmB,GAAG,EAAEF,WAAW,CAACF,MAAM,IAAI,IAAI,CAACZ,iBAAiB,CAACiB,SAAS,IAChF,IAAI,CAACjB,iBAAiB,CAACiB,SAAS,IAAI,CAAC,CAAC;IAC1C,MAAMR,cAAc,GAAG,IAAI,CAACS,cAAc,CAACT,cAAc;IACzD,MAAMU,YAAY,GAAG,IAAI,CAACD,cAAc,CAACC,YAAY;IACrD,MAAMC,kBAAkB,GAAG,CAAC,EAAEX,cAAc,IAAIU,YAAY,IACxD,IAAI,CAACnB,iBAAiB,CAACqB,KAAK,CACvBC,SAAS,CAACb,cAAc,EAAEU,YAAY,CAAC,CACvCI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACnD,MAAMC,aAAa,GAAG,IAAI,CAACxB,iBAAiB,CAACqB,KAAK,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG;IACzE,OAAON,mBAAmB,IAAII,kBAAkB,IAAII,aAAa;EACrE;EACA,IAAIN,cAAcA,CAAA,EAAG;IACjB,OAAO;MACHT,cAAc,EAAE,IAAI,CAACT,iBAAiB,CAACS,cAAc,IAAI,CAAC;MAC1DU,YAAY,EAAE,IAAI,CAACnB,iBAAiB,CAACmB,YAAY,IAAI;IACzD,CAAC;EACL;EACA,IAAIT,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACV,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACqB,KAAK;EACjE;EACA,IAAIX,QAAQA,CAACW,KAAK,EAAE;IAChB,IAAI,CAACpB,eAAe,GAAGoB,KAAK;IAC5B,IAAI,IAAI,CAACrB,iBAAiB,EAAE;MACxB,IAAI,CAACA,iBAAiB,CAACqB,KAAK,GAAGA,KAAK,IAAI,EAAE;IAC9C;EACJ;EACA,IAAII,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACxB,eAAe,IAAI,EAAE;EACrC;AACJ;AAEA,MAAMyB,YAAY,CAAC;EACf3B,WAAWA,CAAC4B,gBAAgB,EAAEC,QAAQ,EAAE;IACpC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,iBAAiB,GAAG,IAAIC,MAAM,CAAC,mCAAmC,CAAC;IACxE,IAAI,CAACC,iBAAiB,GAAG,IAAID,MAAM,CAAC,mCAAmC,CAAC;IACxE,IAAI,CAACE,YAAY,GAAG,IAAIC,GAAG,CAAC,CACxB,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,EACf,CAAC,QAAQ,EAAE,GAAG,CAAC,CAClB,CAAC;IACF,IAAI,CAACC,YAAY,GAAG,IAAIpC,YAAY,CAAC6B,gBAAgB,CAAC;EAC1D;EACAQ,SAASA,CAACC,OAAO,EAAE;IACf,MAAM;MAAEC,OAAO;MAAEC,SAAS;MAAEC;IAAU,CAAC,GAAG,IAAI,CAACX,QAAQ;IACvD,MAAMY,OAAO,GAAGC,MAAM,CAACC,YAAY,CAACN,OAAO,CAAC;IAC5C,MAAMO,aAAa,GAAGH,OAAO,KAAK,IAAI,CAACZ,QAAQ,CAACS,OAAO;IACvD,IAAI,CAAC,IAAI,CAAC3B,QAAQ,EAAE;MAChB,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACkC,SAAS,CAAC,KAAK,EAAEJ,OAAO,CAAC;MAC9C,IAAI/B,cAAc,GAAGoC,SAAS;MAC9B,IAAIN,SAAS,KAAK3C,oBAAoB,CAACkD,OAAO,IAAIR,SAAS,GAAG,CAAC,EAAE;QAC7D7B,cAAc,GAAG,IAAI,CAACC,QAAQ,CAACqC,OAAO,CAACV,OAAO,CAAC;QAC/C,IAAIM,aAAa,EAAE;UACflC,cAAc,EAAE;QACpB;MACJ;MACA,IAAI,CAACuC,gBAAgB,CAACvC,cAAc,CAAC;IACzC,CAAC,MACI;MACD,MAAMA,cAAc,GAAG,IAAI,CAACS,cAAc,CAACT,cAAc;MACzD,MAAMU,YAAY,GAAG,IAAI,CAACD,cAAc,CAACC,YAAY;MACrD,MAAM8B,aAAa,GAAG,IAAI,CAACvC,QAAQ,CAACY,SAAS,CAAC,CAAC,EAAEb,cAAc,CAAC;MAChE,IAAIyC,WAAW,GAAG,IAAI,CAACxC,QAAQ,CAACY,SAAS,CAACH,YAAY,EAAE,IAAI,CAACT,QAAQ,CAACE,MAAM,CAAC;MAC7E;MACA,MAAMuC,gBAAgB,GAAGF,aAAa,CAACF,OAAO,CAACV,OAAO,CAAC,KAAK,CAAC,CAAC;MAC9D,IAAIE,SAAS,KAAK3C,oBAAoB,CAACkD,OAAO,IAC1CK,gBAAgB,IAChB1C,cAAc,KAAKU,YAAY,EAAE;QACjC+B,WAAW,GAAGA,WAAW,CAAC5B,SAAS,CAAC,CAAC,CAAC;MAC1C;MACA,MAAM8B,QAAQ,GAAGH,aAAa,GAAGT,OAAO,GAAGU,WAAW;MACtD,IAAIG,kBAAkB,GAAG5C,cAAc,GAAG,CAAC;MAC3C,MAAM6C,oBAAoB,GAAGX,aAAa,IAAIH,OAAO,KAAK,IAAI,CAACZ,QAAQ,CAAC2B,SAAS;MACjF,IAAID,oBAAoB,IAAId,OAAO,KAAKU,WAAW,CAAC,CAAC,CAAC,EAAE;QACpD;QACA;QACAG,kBAAkB,EAAE;MACxB,CAAC,MACI,IAAI,CAAC,IAAI,CAACxB,iBAAiB,CAAC2B,IAAI,CAAChB,OAAO,CAAC,EAAE;QAC5C;QACA;MACJ;MACA,IAAI,CAAC9B,QAAQ,GAAG0C,QAAQ;MACxB,IAAI,CAACJ,gBAAgB,CAACK,kBAAkB,CAAC;IAC7C;EACJ;EACAT,SAASA,CAACa,QAAQ,EAAE/C,QAAQ,EAAEgD,iBAAiB,GAAG,KAAK,EAAE;IACrD,MAAM;MAAEC,aAAa;MAAEtB,OAAO;MAAEC,SAAS;MAAEsB,MAAM;MAAEC,MAAM;MAAEN,SAAS;MAAEO,GAAG;MAAEvB;IAAW,CAAC,GAAG,IAAI,CAACX,QAAQ;IACvG,IAAI;MAAEmC;IAAI,CAAC,GAAG,IAAI,CAACnC,QAAQ;IAC3BlB,QAAQ,GAAG+C,QAAQ,GAAG,IAAIO,MAAM,CAACtD,QAAQ,CAAC,CAACuD,OAAO,CAAC3B,SAAS,CAAC,GAAG5B,QAAQ;IACxE,IAAII,WAAW,GAAGJ,QAAQ,CAACK,OAAO,CAAC,IAAI,CAACgB,iBAAiB,EAAE,EAAE,CAAC;IAC9D,IAAI,CAACjB,WAAW,IAAIJ,QAAQ,KAAK2B,OAAO,EAAE;MACtC,OAAO,EAAE;IACb;IACA,IAAIE,SAAS,KAAK3C,oBAAoB,CAACkD,OAAO,IAC1C,CAACW,QAAQ,IACT,CAACC,iBAAiB,EAAE;MACpBhD,QAAQ,GAAG,IAAI,CAACwD,kBAAkB,CAACxD,QAAQ,CAAC;MAC5CI,WAAW,GAAGJ,QAAQ,CAACK,OAAO,CAAC,IAAI,CAACgB,iBAAiB,EAAE,EAAE,CAAC;IAC9D;IACA,IAAIoC,WAAW,GAAGrD,WAAW,CACxBsD,KAAK,CAAC,CAAC,EAAEtD,WAAW,CAACF,MAAM,GAAG0B,SAAS,CAAC,CACxCvB,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACxBA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACxBA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IACxB,IAAIoD,WAAW,IAAI,EAAE,EAAE;MACnBA,WAAW,GAAG,GAAG;IACrB;IACA,MAAME,YAAY,GAAGC,QAAQ,CAACH,WAAW,CAAC;IAC1CA,WAAW,GAAGA,WAAW,CAACpD,OAAO,CAAC,iFAAiF,EAAEwC,SAAS,CAAC;IAC/H,IAAIA,SAAS,IAAIY,WAAW,CAACI,UAAU,CAAChB,SAAS,CAAC,EAAE;MAChDY,WAAW,GAAGA,WAAW,CAAC7C,SAAS,CAAC,CAAC,CAAC;IAC1C;IACA,IAAIf,WAAW,GAAG4D,WAAW;IAC7B,MAAMK,WAAW,GAAG1D,WAAW,CAACsD,KAAK,CAACtD,WAAW,CAACF,MAAM,GAAG0B,SAAS,CAAC;IACrE,MAAMmC,YAAY,GAAGH,QAAQ,CAACE,WAAW,CAAC,IAAI,CAAC;IAC/C,MAAME,UAAU,GAAGhE,QAAQ,CAACqC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7C;IACAgB,GAAG,GACCA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKlB,SAAS,IAAIiB,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKjB,SAAS,GAChEkB,GAAG,GACHY,IAAI,CAACZ,GAAG,CAACA,GAAG,EAAED,GAAG,CAAC;IAC5B;IACA;IACA,MAAMc,QAAQ,GAAGZ,MAAM,CAAC,GAAG,CAACa,MAAM,CAACvC,SAAS,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;IACvD;IACA,IAAIc,QAAQ,GAAGiB,YAAY,GAAGI,YAAY,GAAGG,QAAQ;IACrDxB,QAAQ,GAAGsB,UAAU,GAAG,CAACtB,QAAQ,GAAGA,QAAQ;IAC5C,IAAIW,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKlB,SAAS,IAAIO,QAAQ,GAAGW,GAAG,EAAE;MACrD,OAAO,IAAI,CAACnB,SAAS,CAAC,IAAI,EAAEmB,GAAG,GAAG,EAAE,CAAC;IACzC,CAAC,MACI,IAAID,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKjB,SAAS,IAAIO,QAAQ,GAAGU,GAAG,EAAE;MAC1D,OAAO,IAAI,CAAClB,SAAS,CAAC,IAAI,EAAEkB,GAAG,GAAG,EAAE,CAAC;IACzC;IACA,IAAIxB,SAAS,GAAG,CAAC,EAAE;MACf,IAAI/B,WAAW,IAAI,GAAG,IAAIiE,WAAW,CAAC5D,MAAM,GAAG0B,SAAS,EAAE;QACtD/B,WAAW,IAAI8B,OAAO,GAAG,GAAG,CAACyC,MAAM,CAACxC,SAAS,GAAG,CAAC,CAAC,GAAGkC,WAAW;MACpE,CAAC,MACI;QACDjE,WAAW,IAAI8B,OAAO,GAAGmC,WAAW;MACxC;IACJ;IACA;IACA,MAAMO,QAAQ,GAAGL,UAAU,IAAIf,aAAa,CAAC,kBAAkB,GAAG,GAAG,EAAE;IACvE,OAAOoB,QAAQ,GAAGnB,MAAM,GAAGrD,WAAW,GAAGsD,MAAM;EACnD;EACAK,kBAAkBA,CAACxD,QAAQ,EAAE;IACzB,MAAM;MAAE2B,OAAO;MAAEC;IAAU,CAAC,GAAG,IAAI,CAACV,QAAQ;IAC5C,IAAIoD,YAAY,GAAGtE,QAAQ,CAACuE,WAAW,CAAC5C,OAAO,CAAC;IAChD,IAAI2C,YAAY,KAAK,CAAC,CAAC,EAAE;MACrBA,YAAY,GAAGtE,QAAQ,CAACE,MAAM;MAC9BF,QAAQ,IAAI2B,OAAO;IACvB;IACA,IAAI6C,cAAc,GAAGxE,QAAQ,CACxBY,SAAS,CAAC0D,YAAY,CAAC,CACvBjE,OAAO,CAAC,IAAI,CAACgB,iBAAiB,EAAE,EAAE,CAAC;IACxC,MAAMoD,eAAe,GAAGD,cAAc,CAACtE,MAAM;IAC7C,IAAIuE,eAAe,GAAG7C,SAAS,EAAE;MAC7B,KAAK,IAAI8C,CAAC,GAAGD,eAAe,EAAEC,CAAC,GAAG9C,SAAS,EAAE8C,CAAC,EAAE,EAAE;QAC9CF,cAAc,IAAI,GAAG;MACzB;IACJ,CAAC,MACI,IAAIC,eAAe,GAAG7C,SAAS,EAAE;MAClC4C,cAAc,GAAGA,cAAc,CAAC5D,SAAS,CAAC,CAAC,EAAE4D,cAAc,CAACtE,MAAM,GAAG0B,SAAS,GAAG6C,eAAe,CAAC;IACrG;IACA,OAAOzE,QAAQ,CAACY,SAAS,CAAC,CAAC,EAAE0D,YAAY,CAAC,GAAG3C,OAAO,GAAG6C,cAAc;EACzE;EACAG,SAASA,CAAC3E,QAAQ,EAAE;IAChB,IAAI,IAAI,CAAC4E,UAAU,CAAC,CAAC,IAAI5E,QAAQ,KAAK,EAAE,EACpC,OAAO,IAAI;IACf,IAAIW,KAAK,GAAG,CAACX,QAAQ,IAAI,GAAG,EACvBK,OAAO,CAAC,IAAI,CAACa,QAAQ,CAACgC,MAAM,EAAE,EAAE,CAAC,CACjC7C,OAAO,CAAC,IAAI,CAACa,QAAQ,CAACiC,MAAM,EAAE,EAAE,CAAC;IACtC,IAAI,IAAI,CAACjC,QAAQ,CAAC2B,SAAS,EAAE;MACzBlC,KAAK,GAAGA,KAAK,CAACN,OAAO,CAAC,IAAIe,MAAM,CAAC,IAAI,GAAG,IAAI,CAACF,QAAQ,CAAC2B,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;IAC9E;IACA,IAAI,IAAI,CAAC3B,QAAQ,CAACS,OAAO,EAAE;MACvBhB,KAAK,GAAGA,KAAK,CAACN,OAAO,CAAC,IAAI,CAACa,QAAQ,CAACS,OAAO,EAAE,GAAG,CAAC;IACrD;IACA,IAAI,CAACL,YAAY,CAACuD,OAAO,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MACpC,MAAMC,EAAE,GAAG,IAAI5D,MAAM,CAAC2D,GAAG,EAAE,GAAG,CAAC;MAC/BpE,KAAK,GAAGA,KAAK,CAACN,OAAO,CAAC2E,EAAE,EAAEF,GAAG,CAAC;IAClC,CAAC,CAAC;IACF,OAAOG,UAAU,CAACtE,KAAK,CAAC;EAC5B;EACAuE,gBAAgBA,CAAA,EAAG;IACf,IAAI,IAAI,CAAChE,QAAQ,CAAC+B,aAAa,CAAC,8BAC5B,IAAI,CAACjD,QAAQ,EAAEmF,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,wBAAwB;MACxD;MACA,IAAI,CAACnF,QAAQ,GAAG,IAAI,CAACkC,SAAS,CAAC,KAAK,EAAE,GAAG,IAAI,IAAI,CAAClC,QAAQ,GAAG,IAAI,CAACA,QAAQ,GAAG,GAAG,CAAC,CAAC;IACtF;EACJ;EACAoF,gBAAgBA,CAAA,EAAG;IACf;IACA,IAAI,CAACpF,QAAQ,GAAG,IAAI,CAACkC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAClC,QAAQ,EAAEK,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;EAChF;EACAgF,YAAYA,CAAC3D,OAAO,EAAE;IAClB,MAAM;MAAEC,OAAO;MAAEkB,SAAS;MAAEK,MAAM;MAAEC,MAAM;MAAEtB;IAAU,CAAC,GAAG,IAAI,CAACX,QAAQ;IACvE,IAAI,IAAI,CAAC0D,UAAU,CAAC,CAAC,IAAI,IAAI,CAACjE,KAAK,IAAI,CAAC,EAAE;MACtC,IAAI,CAACX,QAAQ,GAAG,IAAI;MACpB;IACJ;IACA,IAAIS,YAAY,GAAG,IAAI,CAACD,cAAc,CAACC,YAAY;IACnD,IAAIV,cAAc,GAAG,IAAI,CAACS,cAAc,CAACT,cAAc;IACvD,MAAMuF,WAAW,GAAG,CAAC,IAAI,CAACtF,QAAQ,EAAEE,MAAM,IAAI,CAAC,IAAIiD,MAAM,CAACjD,MAAM;IAChEO,YAAY,GAAGwD,IAAI,CAACb,GAAG,CAACkC,WAAW,EAAErB,IAAI,CAACZ,GAAG,CAAC5C,YAAY,EAAEyC,MAAM,CAAChD,MAAM,CAAC,CAAC;IAC3EH,cAAc,GAAGkE,IAAI,CAACb,GAAG,CAACkC,WAAW,EAAErB,IAAI,CAACZ,GAAG,CAACtD,cAAc,EAAEmD,MAAM,CAAChD,MAAM,CAAC,CAAC;IAC/E;IACA,IAAIH,cAAc,KAAKU,YAAY,IAC/B,IAAI,CAACD,cAAc,CAACT,cAAc,KAAK,IAAI,CAACS,cAAc,CAACC,YAAY,EAAE;MACzE,IAAI,CAAC6B,gBAAgB,CAACvC,cAAc,CAAC;MACrC;IACJ;IACA,IAAIuE,YAAY,GAAG,IAAI,CAACtE,QAAQ,EAAEqC,OAAO,CAACV,OAAO,CAAC,IAAI,CAAC,CAAC;IACxD,IAAI2C,YAAY,KAAK,CAAC,CAAC,EAAE;MACrBA,YAAY,GAAG,IAAI,CAACtE,QAAQ,EAAEE,MAAM,IAAI,CAAC;IAC7C;IACA,IAAIqF,cAAc,GAAG,CAAC;IACtB,IAAIC,WAAW,GAAG,EAAE;IACpB,MAAMC,kBAAkB,GAAGnB,YAAY,GAAG7D,YAAY;IACtD,MAAMiF,oCAAoC,GAAGpB,YAAY,GAAG,CAAC,KAAK7D,YAAY;IAC9E,IAAIA,YAAY,KAAKV,cAAc,EAAE;MACjC,IAAI2B,OAAO,IAAI,CAAC,EAAE;QACd,IAAI3B,cAAc,IAAImD,MAAM,CAAChD,MAAM,EAAE;UACjC;QACJ;QACAH,cAAc,EAAE;QAChB;QACA,IAAI,CAAC,IAAI,CAACC,QAAQ,EACZY,SAAS,CAACb,cAAc,EAAEA,cAAc,GAAG,CAAC,CAAC,CAC9Cc,KAAK,CAAC,IAAI,CAAC,EAAE;UACdd,cAAc,EAAE;QACpB;QACA;QACA,IAAI8B,SAAS,KAAK3C,oBAAoB,CAACkD,OAAO,IAAIqD,kBAAkB,EAAE;UAClEF,cAAc,GAAG,CAAC,CAAC;UACnB;UACA,IAAIG,oCAAoC,IACpC,CAAC,IAAI,CAAC/E,KAAK,IAAI,CAAC,IAAI,EAAE,IACtB,CAAC,IAAI,CAACA,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACzB6E,WAAW,IAAI,GAAG;UACtB;QACJ;MACJ,CAAC,MACI,IAAI9D,OAAO,IAAI,EAAE,IAAIA,OAAO,IAAI,KAAK,EAAE;QACxC,IAAI3B,cAAc,KAAKuF,WAAW,EAAE;UAChC;QACJ;QACA7E,YAAY,EAAE;QACd;QACA,IAAI,CAAC,IAAI,CAACT,QAAQ,EACZY,SAAS,CAACb,cAAc,EAAEA,cAAc,GAAG,CAAC,CAAC,CAC9Cc,KAAK,CAAC,IAAI,CAAC,EAAE;UACdd,cAAc,EAAE;UAChBU,YAAY,EAAE;QAClB;MACJ;IACJ;IACA;IACA,IAAIoB,SAAS,KAAK3C,oBAAoB,CAACkD,OAAO,IAC1CrC,cAAc,GAAGuE,YAAY,EAAE;MAC/B,MAAMqB,oBAAoB,GAAGlF,YAAY,GAAGV,cAAc;MAC1D,KAAK,IAAI2E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,oBAAoB,EAAEjB,CAAC,EAAE,EAAE;QAC3Cc,WAAW,IAAI,GAAG;MACtB;IACJ;IACA,IAAII,gBAAgB,GAAG,CAAC,IAAI,CAAC5F,QAAQ,EAAEE,MAAM,IAAI,CAAC,IAAIO,YAAY;IAClE,IAAI,CAACT,QAAQ,GACT,IAAI,CAACA,QAAQ,EAAEY,SAAS,CAAC,CAAC,EAAEb,cAAc,CAAC,GACvCyF,WAAW,GACX,IAAI,CAACxF,QAAQ,EAAEY,SAAS,CAACH,YAAY,CAAC;IAC9C;IACA,MAAMoF,SAAS,GAAG,IAAI,CAAC7F,QAAQ,CAACY,SAAS,CAACsC,MAAM,CAAChD,MAAM,EAAEgD,MAAM,CAAChD,MAAM,GAAG,CAAC,CAAC;IAC3E,IAAI2F,SAAS,KAAKhD,SAAS,EAAE;MACzB,IAAI,CAAC7C,QAAQ,GACT,IAAI,CAACA,QAAQ,CAACY,SAAS,CAAC,CAAC,EAAEsC,MAAM,CAAChD,MAAM,CAAC,GACrC,IAAI,CAACF,QAAQ,CAACY,SAAS,CAACsC,MAAM,CAAChD,MAAM,GAAG,CAAC,CAAC;MAClD0F,gBAAgB,GAAG3B,IAAI,CAACb,GAAG,CAACwC,gBAAgB,EAAE,IAAI,CAAC5F,QAAQ,CAACE,MAAM,GAAGgD,MAAM,CAAChD,MAAM,CAAC;IACvF;IACA,IAAI,CAACoC,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACE,MAAM,GAAG0F,gBAAgB,GAAGL,cAAc,EAAE,IAAI,CAAC;EACzF;EACAjD,gBAAgBA,CAACvC,cAAc,EAAEiD,iBAAiB,GAAG,KAAK,EAAE;IACxD,MAAMnD,WAAW,GAAG,IAAI,CAACqC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAClC,QAAQ,IAAI,EAAE,EAAEgD,iBAAiB,CAAC;IACjFjD,cAAc,KAAK,IAAI,CAACC,QAAQ,EAAEE,MAAM,IAAI,CAAC;IAC7CH,cAAc,GAAGkE,IAAI,CAACZ,GAAG,CAAC,IAAI,CAACnC,QAAQ,CAACgC,MAAM,CAAChD,MAAM,EAAE+D,IAAI,CAACb,GAAG,CAACrD,cAAc,EAAE,CAAC,IAAI,CAACC,QAAQ,EAAEE,MAAM,IAAI,CAAC,IAAI,IAAI,CAACgB,QAAQ,CAACiC,MAAM,CAACjD,MAAM,CAAC,CAAC;IAC5I,IAAI,CAACsB,YAAY,CAAC5B,oBAAoB,CAACC,WAAW,EAAE,IAAI,CAACG,QAAQ,EAAEE,MAAM,IAAI,CAAC,EAAEH,cAAc,CAAC;EACnG;EACA+F,aAAaA,CAACC,OAAO,EAAE;IACnB,MAAMpF,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAI,CAACO,QAAQ,GAAG6E,OAAO;IACvB,IAAI,CAACpF,KAAK,GAAGA,KAAK;EACtB;EACAqF,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC9E,QAAQ,CAACgC,MAAM,CAAChD,MAAM;EACtC;EACA+F,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC/E,QAAQ,CAACiC,MAAM,CAACjD,MAAM;EACtC;EACA0E,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAAC1D,QAAQ,CAACgF,QAAQ;EACjC;EACA,IAAI/F,mBAAmBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACqB,YAAY,CAACrB,mBAAmB;EAChD;EACA,IAAIK,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACgB,YAAY,CAAChB,cAAc;EAC3C;EACA,IAAIR,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACwB,YAAY,CAACxB,QAAQ;EACrC;EACA,IAAIA,QAAQA,CAACW,KAAK,EAAE;IAChB,IAAI,CAACa,YAAY,CAACxB,QAAQ,GAAGW,KAAK;EACtC;EACA,IAAII,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACS,YAAY,CAACT,cAAc;EAC3C;EACA,IAAIJ,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACgE,SAAS,CAAC,IAAI,CAAC3E,QAAQ,CAAC;EACxC;EACA,IAAIW,KAAKA,CAACA,KAAK,EAAE;IACb,IAAI,CAACX,QAAQ,GAAG,IAAI,CAACkC,SAAS,CAAC,IAAI,EAAE,EAAE,GAAGvB,KAAK,CAAC;EACpD;EACAwF,kBAAkBA,CAACxF,KAAK,EAAE;IACtB,OAAOA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKwB,SAAS;EAChD;AACJ;AAEA,MAAMiE,YAAY,CAAC;EACf/G,WAAWA,CAAC4B,gBAAgB,EAAE8E,OAAO,EAAE;IACnC,IAAI,CAACM,YAAY,GAAG,IAAIrF,YAAY,CAACC,gBAAgB,EAAE8E,OAAO,CAAC;EACnE;EACAO,SAASA,CAAA,EAAG;IACRC,UAAU,CAAC,MAAM;MACb,IAAI,CAACF,YAAY,CAAC/D,gBAAgB,CAAC,CAAC;MACpC,IAAI,CAACkE,QAAQ,CAAC,IAAI,CAACH,YAAY,CAAC1F,KAAK,CAAC;MACtC,IAAI,CAAC8F,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC1F,KAAK,CAAC;IAC/C,CAAC,EAAE,CAAC,CAAC;EACT;EACA+F,WAAWA,CAAA,EAAG;IACV,MAAM1G,QAAQ,GAAG,IAAI,CAACqG,YAAY,CAACrG,QAAQ,IAAI,EAAE;IACjD,MAAMD,cAAc,GAAG,IAAI,CAACsG,YAAY,CAAC7F,cAAc,CAACT,cAAc;IACtE,MAAM2B,OAAO,GAAG1B,QAAQ,CAAC2G,UAAU,CAAC5G,cAAc,GAAG,CAAC,CAAC;IACvD,MAAM6G,cAAc,GAAG5G,QAAQ,CAACE,MAAM;IACtC,MAAM2G,oBAAoB,GAAG,IAAI,CAACR,YAAY,CAACtF,cAAc,CAACb,MAAM;IACpE,IAAI+D,IAAI,CAAC6C,GAAG,CAACF,cAAc,GAAGC,oBAAoB,CAAC,IAAI,CAAC,EAAE;MACtD,IAAI,CAACR,YAAY,CAAC/D,gBAAgB,CAACvC,cAAc,CAAC;MAClD,IAAI,CAAC0G,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC1F,KAAK,CAAC;MAC3C;IACJ;IACA;IACA,IAAI,CAAC0F,YAAY,CAACrG,QAAQ,GAAG,IAAI,CAACqG,YAAY,CAACtF,cAAc;IAC7D,IAAI6F,cAAc,GAAGC,oBAAoB,EAAE;MACvC;MACA;MACA,IAAI,CAACE,KAAK,CAAC,MAAM;QACb;QACA,IAAI,CAACV,YAAY,CAAC/D,gBAAgB,CAACvC,cAAc,GAAG,CAAC,CAAC;QACtD;QACA,IAAI,CAACsG,YAAY,CAAChB,YAAY,CAAC,CAAC,CAAC;QACjC,IAAI,CAACoB,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC1F,KAAK,CAAC;MAC/C,CAAC,EAAE,CAAC,CAAC;IACT;IACA,IAAIiG,cAAc,GAAGC,oBAAoB,EAAE;MACvC;MACA,IAAI,CAACR,YAAY,CAAC/D,gBAAgB,CAACvC,cAAc,GAAG,CAAC,CAAC;MACtD;MACA,IAAI,CAACiH,mBAAmB,CAACtF,OAAO,CAAC;IACrC;EACJ;EACAuF,aAAaA,CAACC,KAAK,EAAE;IACjB,MAAMxF,OAAO,GAAGwF,KAAK,CAACC,KAAK,IAAID,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACxF,OAAO;IAC9D,IAAIA,OAAO,IAAI,CAAC,IAAIA,OAAO,IAAI,EAAE,IAAIA,OAAO,IAAI,KAAK,EAAE;MACnDwF,KAAK,CAACG,cAAc,CAAC,CAAC;MACtB,IAAI,IAAI,CAAChB,YAAY,CAAC7F,cAAc,CAACT,cAAc,IAC/C,IAAI,CAACsG,YAAY,CAACL,YAAY,CAAC,CAAC,IAChC,IAAI,CAACK,YAAY,CAAC7F,cAAc,CAACC,YAAY,IACzC,CAAC,IAAI,CAAC4F,YAAY,CAACrG,QAAQ,EAAEE,MAAM,IAAI,CAAC,IACpC,IAAI,CAACmG,YAAY,CAACJ,YAAY,CAAC,CAAC,EAAE;QAC1C,IAAI,CAACqB,UAAU,CAAC,CAAC;MACrB,CAAC,MACI;QACD,IAAI,CAACjB,YAAY,CAAChB,YAAY,CAAC3D,OAAO,CAAC;QACvC,IAAI,CAAC+E,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC1F,KAAK,CAAC;MAC/C;IACJ;EACJ;EACA2G,UAAUA,CAAA,EAAG;IACT,IAAI,CAACd,QAAQ,CAAC,IAAI,CAACH,YAAY,CAACzB,UAAU,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;IACxD,IAAI,CAAC6B,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC1F,KAAK,CAAC;EAC/C;EACA4G,cAAcA,CAACL,KAAK,EAAE;IAClB,MAAMxF,OAAO,GAAGwF,KAAK,CAACC,KAAK,IAAID,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACxF,OAAO;IAC9DwF,KAAK,CAACG,cAAc,CAAC,CAAC;IACtB,IAAI3F,OAAO,KAAK,EAAE,IAAIwF,KAAK,CAACM,OAAO,EAAE;MACjC;IACJ;IACA,IAAI,CAACR,mBAAmB,CAACtF,OAAO,CAAC;EACrC;EACAsF,mBAAmBA,CAACtF,OAAO,EAAE;IACzB,QAAQA,OAAO;MACX,KAAKS,SAAS;MACd,KAAK,CAAC;MACN,KAAK,EAAE;QACH;MACJ,KAAK,EAAE;QACH,IAAI,CAACkE,YAAY,CAACjB,gBAAgB,CAAC,CAAC;QACpC;MACJ,KAAK,EAAE;QACH,IAAI,CAACiB,YAAY,CAACnB,gBAAgB,CAAC,CAAC;QACpC;MACJ;QACI,IAAI,IAAI,CAACmB,YAAY,CAAClG,mBAAmB,EAAE;UACvC,MAAMsH,oBAAoB,GAAGxD,IAAI,CAAC6C,GAAG,CAAC,IAAI,CAACT,YAAY,CAAC7F,cAAc,CAACC,YAAY,GAC/E,IAAI,CAAC4F,YAAY,CAAC7F,cAAc,CAACT,cAAc,CAAC;UACpD,IAAI0H,oBAAoB,KAAK,IAAI,CAACpB,YAAY,CAACrG,QAAQ,EAAEE,MAAM,IAAI,CAAC,CAAC,EAAE;YACnE,IAAI,CAACsG,QAAQ,CAAC,IAAI,CAAC;UACvB;UACA,IAAI,CAACH,YAAY,CAAC5E,SAAS,CAACC,OAAO,CAAC;QACxC;QACA;IACR;IACA,IAAI,CAAC+E,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC1F,KAAK,CAAC;EAC/C;EACA+G,WAAWA,CAAA,EAAG;IACVnB,UAAU,CAAC,MAAM;MACb,IAAI,CAACF,YAAY,CAAC/D,gBAAgB,CAAC,CAAC;MACpC,IAAI,CAACkE,QAAQ,CAAC,IAAI,CAACH,YAAY,CAAC1F,KAAK,CAAC;MACtC,IAAI,CAAC8F,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC1F,KAAK,CAAC;IAC/C,CAAC,EAAE,CAAC,CAAC;EACT;EACAmF,aAAaA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACM,YAAY,CAACP,aAAa,CAACC,OAAO,CAAC;EAC5C;EACA4B,gBAAgBA,CAAA,EAAG;IACf,OAAO,IAAI,CAAClB,aAAa;EAC7B;EACAmB,gBAAgBA,CAACC,gBAAgB,EAAE;IAC/B,IAAI,CAACpB,aAAa,GAAGoB,gBAAgB;EACzC;EACAC,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,cAAc;EAC9B;EACAC,iBAAiBA,CAACH,gBAAgB,EAAE;IAChC,IAAI,CAACE,cAAc,GAAGF,gBAAgB;EAC1C;EACArB,QAAQA,CAAC7F,KAAK,EAAE;IACZ,IAAI,CAAC0F,YAAY,CAAC1F,KAAK,GAAGA,KAAK;EACnC;EACA;AACJ;AACA;EACIoG,KAAKA,CAACkB,QAAQ,EAAEC,iBAAiB,EAAE;IAC/B3B,UAAU,CAAC0B,QAAQ,EAAEC,iBAAiB,CAAC;EAC3C;AACJ;AAEA,MAAMC,oBAAoB,CAAC;EACvB9I,WAAWA,CAAC+I,aAAa,EAAEC,eAAe,EAAEC,WAAW,EAAE;IACrD,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACvC,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACwC,gBAAgB,GAAG;MACpBC,KAAK,EAAE,OAAO;MACdvF,aAAa,EAAE,IAAI;MACnBwF,SAAS,EAAE,IAAI;MACf9G,OAAO,EAAE,GAAG;MACZC,SAAS,EAAE,CAAC;MACZsB,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE,EAAE;MACVN,SAAS,EAAE,GAAG;MACdqD,QAAQ,EAAE,KAAK;MACfrE,SAAS,EAAE3C,oBAAoB,CAACwJ,SAAS;MACzC,GAAGN;IACP,CAAC;IACD,IAAI,CAACO,eAAe,GAAGN,eAAe,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;EAC5D;EACAC,QAAQA,CAAA,EAAG;IACP,IAAI,CAACC,aAAa,GAAG,IAAI3C,YAAY,CAAC,IAAI,CAACkC,WAAW,CAACU,aAAa,EAAE;MAClE,GAAG,IAAI,CAACT,gBAAgB;MACxB,GAAG,IAAI,CAACxC;IACZ,CAAC,CAAC;EACN;EACAkD,eAAeA,CAAA,EAAG;IACd,IAAI,CAACX,WAAW,CAACU,aAAa,CAACE,KAAK,CAACC,SAAS,GAC1C,IAAI,CAACpD,OAAO,EAAEyC,KAAK,IAAI,IAAI,CAACD,gBAAgB,CAACC,KAAK;EAC1D;EACAY,SAASA,CAAA,EAAG;IACR,IAAI,IAAI,CAACT,eAAe,CAACU,IAAI,CAAC,IAAI,CAACtD,OAAO,CAAC,EAAE;MACzC,IAAI,CAACuC,WAAW,CAACU,aAAa,CAACE,KAAK,CAACC,SAAS,GAC1C,IAAI,CAACpD,OAAO,EAAEyC,KAAK,IAAI,IAAI,CAACD,gBAAgB,CAACC,KAAK;MACtD,IAAI,CAACO,aAAa,CAACjD,aAAa,CAAC;QAC7B,GAAG,IAAI,CAACyC,gBAAgB;QACxB,GAAG,IAAI,CAACxC;MACZ,CAAC,CAAC;IACN;EACJ;EACAuD,UAAUA,CAACpC,KAAK,EAAE;IACd,IAAI,CAAC6B,aAAa,CAACjB,iBAAiB,CAAC,CAAC,CAACyB,KAAK,CAACrC,KAAK,CAAC;EACvD;EACAZ,SAASA,CAAA,EAAG;IACR,IAAI,CAAC,IAAI,CAACkD,eAAe,CAAC,CAAC,EAAE;MACzB,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,IAAI,IAAI,CAACV,aAAa,CAACzC,SAAS,CAAC,CAAC;IACxD;EACJ;EACAI,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAAC8C,eAAe,CAAC,CAAC,EAAE;MACxB,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,IAAI,IAAI,CAACV,aAAa,CAACrC,WAAW,CAAC,CAAC;IAC1D;EACJ;EACAO,aAAaA,CAACC,KAAK,EAAE;IACjB,IAAI,CAAC,IAAI,CAACsC,eAAe,CAAC,CAAC,EAAE;MACzB,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,IAAI,IAAI,CAACV,aAAa,CAAC9B,aAAa,CAACC,KAAK,CAAC;IACjE;EACJ;EACAK,cAAcA,CAACL,KAAK,EAAE;IAClB,IAAI,CAAC,IAAI,CAACsC,eAAe,CAAC,CAAC,EAAE;MACzB,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,IAAI,IAAI,CAACV,aAAa,CAACxB,cAAc,CAACL,KAAK,CAAC;IAClE;EACJ;EACAQ,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC,IAAI,CAAC8B,eAAe,CAAC,CAAC,EAAE;MACzB,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,IAAI,IAAI,CAACV,aAAa,CAACrB,WAAW,CAAC,CAAC;IAC1D;EACJ;EACAgC,UAAUA,CAACxC,KAAK,EAAE;IACd,IAAI,CAAC,IAAI,CAACsC,eAAe,CAAC,CAAC,EAAE;MACzBtC,KAAK,CAACG,cAAc,CAAC,CAAC;IAC1B;EACJ;EACAmC,eAAeA,CAAA,EAAG;IACd,OAAQ,SAAS,CAAC1G,IAAI,CAAC6G,SAAS,CAACC,SAAS,CAAC,IACvC,UAAU,CAAC9G,IAAI,CAAC6G,SAAS,CAACC,SAAS,CAAC;EAC5C;EACAH,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACnB,WAAW,CAACU,aAAa,CAACa,YAAY,CAAC,UAAU,CAAC;EAClE;EACAC,gBAAgBA,CAACjC,gBAAgB,EAAE;IAC/B,IAAI,CAACkB,aAAa,CAACnB,gBAAgB,CAACC,gBAAgB,CAAC;EACzD;EACAkC,iBAAiBA,CAAClC,gBAAgB,EAAE;IAChC,IAAI,CAACkB,aAAa,CAACf,iBAAiB,CAACH,gBAAgB,CAAC;EAC1D;EACAmC,gBAAgBA,CAACC,UAAU,EAAE;IACzB,IAAI,CAAC3B,WAAW,CAACU,aAAa,CAACkB,QAAQ,GAAGD,UAAU;EACxD;EACAE,UAAUA,CAACxJ,KAAK,EAAE;IACd,IAAI,CAACoI,aAAa,CAACvC,QAAQ,CAAC7F,KAAK,CAAC;EACtC;AASJ;AAACyJ,MAAA,GAnGKjC,oBAAoB;AA2FbiC,MAAA,CAAKC,IAAI,YAAAC,eAAAC,CAAA;EAAA,YAAAA,CAAA,IAAwFpC,MAAoB,EASjD3J,EAAE,CAAAgM,iBAAA,CATiErL,mBAAmB,MAStFX,EAAE,CAAAgM,iBAAA,CATiHhM,EAAE,CAACiM,eAAe,GASrIjM,EAAE,CAAAgM,iBAAA,CATgJhM,EAAE,CAACkM,UAAU;AAAA,CAA4C;AAC/QN,MAAA,CAAKO,IAAI,kBAQ2DnM,EAAE,CAAAoM,iBAAA;EAAAC,IAAA,EARe1C,MAAoB;EAAA2C,SAAA;EAAAC,YAAA,WAAAC,oBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MAQrCzM,EAAE,CAAA2M,UAAA,kBAAAC,+BAAAC,MAAA;QAAA,OAReH,GAAA,CAAA5B,UAAA,CAAA+B,MAAiB,CAAC;MAAA,mBAAAC,8BAAA;QAAA,OAAlBJ,GAAA,CAAA5E,SAAA,CAAU,CAAC;MAAA,qBAAAiF,gCAAA;QAAA,OAAXL,GAAA,CAAAxE,WAAA,CAAY,CAAC;MAAA,uBAAA8E,kCAAAH,MAAA;QAAA,OAAbH,GAAA,CAAAjE,aAAA,CAAAoE,MAAoB,CAAC;MAAA,wBAAAI,mCAAAJ,MAAA;QAAA,OAArBH,GAAA,CAAA3D,cAAA,CAAA8D,MAAqB,CAAC;MAAA,qBAAAK,gCAAA;QAAA,OAAtBR,GAAA,CAAAxD,WAAA,CAAY,CAAC;MAAA,oBAAAiE,+BAAAN,MAAA;QAAA,OAAbH,GAAA,CAAAxB,UAAA,CAAA2B,MAAiB,CAAC;MAAA;IAAA;EAAA;EAAAO,MAAA;IAAA7F,OAAA;EAAA;EAAA8F,UAAA;EAAAC,QAAA,GAQnCtN,EAAE,CAAAuN,kBAAA,CARyW,CAChb;IACIC,OAAO,EAAE/M,iBAAiB;IAC1BgN,WAAW,EAAEvN,UAAU,CAAC,MAAMyJ,MAAoB,CAAC;IACnD+D,KAAK,EAAE;EACX,CAAC,CACJ;AAAA,EAAiB;AAE1B;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAAiF3N,EAAE,CAAA4N,iBAAA,CAAQjE,oBAAoB,EAAc,CAAC;IAClH0C,IAAI,EAAElM,SAAS;IACf0N,IAAI,EAAE,CAAC;MACCR,UAAU,EAAE,IAAI;MAChBS,QAAQ,EAAE,gBAAgB;MAC1BC,SAAS,EAAE,CACP;QACIP,OAAO,EAAE/M,iBAAiB;QAC1BgN,WAAW,EAAEvN,UAAU,CAAC,MAAMyJ,oBAAoB,CAAC;QACnD+D,KAAK,EAAE;MACX,CAAC;IAET,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAErB,IAAI,EAAE1I,SAAS;MAAEqK,UAAU,EAAE,CAAC;QAC9D3B,IAAI,EAAEjM;MACV,CAAC,EAAE;QACCiM,IAAI,EAAEhM,MAAM;QACZwN,IAAI,EAAE,CAAClN,mBAAmB;MAC9B,CAAC;IAAE,CAAC,EAAE;MAAE0L,IAAI,EAAErM,EAAE,CAACiM;IAAgB,CAAC,EAAE;MAAEI,IAAI,EAAErM,EAAE,CAACkM;IAAW,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAE3E,OAAO,EAAE,CAAC;MAC7F8E,IAAI,EAAE/L;IACV,CAAC,CAAC;IAAEwK,UAAU,EAAE,CAAC;MACbuB,IAAI,EAAE9L,YAAY;MAClBsN,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;IAC7B,CAAC,CAAC;IAAE/F,SAAS,EAAE,CAAC;MACZuE,IAAI,EAAE9L,YAAY;MAClBsN,IAAI,EAAE,CAAC,KAAK;IAChB,CAAC,CAAC;IAAE3F,WAAW,EAAE,CAAC;MACdmE,IAAI,EAAE9L,YAAY;MAClBsN,IAAI,EAAE,CAAC,OAAO;IAClB,CAAC,CAAC;IAAEpF,aAAa,EAAE,CAAC;MAChB4D,IAAI,EAAE9L,YAAY;MAClBsN,IAAI,EAAE,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;IAChC,CAAC,CAAC;IAAE9E,cAAc,EAAE,CAAC;MACjBsD,IAAI,EAAE9L,YAAY;MAClBsN,IAAI,EAAE,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC;IACjC,CAAC,CAAC;IAAE3E,WAAW,EAAE,CAAC;MACdmD,IAAI,EAAE9L,YAAY;MAClBsN,IAAI,EAAE,CAAC,OAAO;IAClB,CAAC,CAAC;IAAE3C,UAAU,EAAE,CAAC;MACbmB,IAAI,EAAE9L,YAAY;MAClBsN,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;IAC7B,CAAC;EAAE,CAAC;AAAA;AAEhB,SAASI,6BAA6BA,CAACC,MAAM,EAAE;EAC3C,OAAO1N,wBAAwB,CAAC,CAC5B;IACIgN,OAAO,EAAE7M,mBAAmB;IAC5BwN,QAAQ,EAAED;EACd,CAAC,CACJ,CAAC;AACN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASvN,mBAAmB,EAAEgJ,oBAAoB,EAAEjJ,oBAAoB,EAAEuN,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}